def calculate_sprint_metrics(time_5m, time_10m, time_30m):
    """
    Calculate sprint split velocities and times.
    
    Parameters:
        time_5m (float): Time to reach 5m (s)
        time_10m (float): Time to reach 10m (s)
        time_30m (float): Time to reach 30m (s)
    
    Returns:
        dict: Results with split times, velocities
    """
    if not (0 < time_5m < time_10m < time_30m):
        raise ValueError("Times must be positive and increasing (t5 < t10 < t30).")
    
    # Velocities
    v_0_5 = 5 / time_5m
    v_5_10 = (10 - 5) / (time_10m - time_5m)
    v_10_30 = (30 - 10) / (time_30m - time_10m)
    v_0_30 = 30 / time_30m  # overall
    
    return {
        "Time 5m (s)": round(time_5m, 3),
        "Time 10m (s)": round(time_10m, 3),
        "Time 30m (s)": round(time_30m, 3),
        "Velocity 0–5m (m/s)": round(v_0_5, 2),
        "Velocity 5–10m (m/s)": round(v_5_10, 2),
        "Velocity 10–30m (m/s)": round(v_10_30, 2),
        "Velocity 0–30m Avg (m/s)": round(v_0_30, 2),
    }


def main():
    print("=== Sprint Timing Gates Test (5m, 10m, 30m) ===")
    t5 = float(input("Enter time to 5m (s): "))
    t10 = float(input("Enter time to 10m (s): "))
    t30 = float(input("Enter time to 30m (s): "))
    
    results = calculate_sprint_metrics(t5, t10, t30)
    
    print("\n--- Results ---")
    for k, v in results.items():
        print(f"{k}: {v}")


if __name__ == "__main__":
    main()
